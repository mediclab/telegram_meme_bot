use crate::app::{utils as Utils, utils::Messages, Application};
use crate::database::models::MemeLikeOperation;
use anyhow::Result;
use teloxide::prelude::*;

pub async fn send_top_stats(app: &Application, period: Utils::Period) -> Result<()> {
    let mut text: String;
    let period_text = get_translations(&period);
    let chat_id: i64;

    debug!(
        "Selected period from: {} to: {}",
        period.dates().0,
        period.dates().1
    );

    match period {
        Utils::Period::Week => {
            if !Utils::Period::is_today_a_friday() {
                debug!("Today is not a Friday!");
                return Ok(());
            }
        }
        Utils::Period::Month => {
            if !Utils::Period::is_today_a_last_month_day() {
                debug!("Today is not a Last Month Day!");
                return Ok(());
            }
        }
        Utils::Period::Year => {
            if !Utils::Period::is_today_a_last_year_day() {
                debug!("Today is not a Last Year Day!");
                return Ok(());
            }
        }
    }

    match app.database.get_top_meme(&period) {
        Ok((meme, likes)) => {
            let user = app.get_chat_user(meme.chat_id, meme.user_id as u64).await?;

            text = format!(
                "{} —Ç–≤–æ–π –º–µ–º –Ω–∞–±—Ä–∞–ª {}!\n–ë–æ–ª—å—à–µ –≤—Å–µ—Ö {}!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ",
                Utils::get_user_text(&user),
                Messages::pluralize(likes, ("–ª–∞–π–∫", "–ª–∞–π–∫–∞", "–ª–∞–π–∫–æ–≤")),
                period_text.1
            );

            app.bot
                .send_message(meme.chat_id(), &text)
                .reply_to_message_id(meme.msg_id())
                .await
                .expect("Can't send 'top of' message");

            chat_id = meme.chat_id().0;
        }
        Err(_) => {
            error!("Can't get top mem for this period!");

            return Ok(());
        }
    }

    text = String::new();

    if let Ok((user_id, count)) = app.database.get_top_memesender(&period) {
        let user = app.get_chat_user(chat_id, user_id as u64).await?;

        text = format!(
            "ü§° –ú–µ–º–æ–º—ë—Ç {}:\n{} –æ—Ç–ø—Ä–∞–≤–∏–ª {} {}!\n\n",
            period_text.0,
            Utils::get_user_text(&user),
            Messages::pluralize(count, ("–º–µ–º", "–º–µ–º–∞", "–º–µ–º–æ–≤")),
            period_text.1
        );
    };

    if let Ok((user_id, count)) = app.database.get_top_selflikes(&period) {
        let user = app.get_chat_user(chat_id, user_id as u64).await?;

        if count > 4 {
            text = format!(
                "{text}üòà –•–∏—Ç—Ä–µ—Ü {}:\n{} –ª–∞–π–∫–Ω—É–ª —Å–≤–æ–∏ –∂–µ –º–µ–º—ã {} {}!\n\n",
                period_text.0,
                Utils::get_user_text(&user),
                Messages::pluralize(count, ("—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑")),
                period_text.1
            );
        }
    }

    if let Ok((user_id, count)) = app
        .database
        .get_top_likers(&period, MemeLikeOperation::Like)
    {
        let user = app.get_chat_user(chat_id, user_id as u64).await?;

        text = format!(
            "{text}‚ù§Ô∏è –î–æ–±—Ä–æ–¥–µ—è—Ç–µ–ª—å {}:\n{} –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ {}!\n–¶–µ–ª—ã—Ö {}\n\n",
            period_text.0,
            Utils::get_user_text(&user),
            period_text.1,
            Messages::pluralize(count, ("–ª–∞–π–∫", "–ª–∞–π–∫–∞", "–ª–∞–π–∫–æ–≤")),
        );
    }

    if let Ok((user_id, count)) = app
        .database
        .get_top_likers(&period, MemeLikeOperation::Dislike)
    {
        let user = app.get_chat_user(chat_id, user_id as u64).await?;

        text = format!(
            "{text}üò° –ó–∞—Å—Ä–∞–Ω–µ—Ü {}:\n{} –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö –¥–∏–∑–ª–∞–π–∫–æ–≤ {}!\n–¶–µ–ª—ã—Ö {}",
            period_text.0,
            Utils::get_user_text(&user),
            period_text.1,
            Messages::pluralize(count, ("–¥–∏–∑–ª–∞–π–∫", "–¥–∏–∑–ª–∞–π–∫–∞", "–¥–∏–∑–ª–∞–π–∫–æ–≤")),
        );
    }

    if !text.is_empty() {
        app.bot
            .send_message(
                ChatId(chat_id),
                format!("–•–æ—Ç–µ–ª–∏ —Ç–æ–ø–æ–≤? –ò—Ö –µ—Å—Ç—å —É –º–µ–Ω—è!\n\n{}", &text),
            )
            .await
            .expect("Can't send 'top of' message");
    }

    if let Ok((meme, dislikes)) = app.database.get_max_disliked_meme(&period) {
        if period != Utils::Period::Week {
            return Ok(());
        }

        let user = app.get_chat_user(meme.chat_id, meme.user_id as u64).await?;

        text = format!(
            "–í—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, {} –Ω–∞ —Ç–≤–æ–π –º–µ–º –Ω–∞—Å—Ç–∞–≤–∏–ª–∏ {}!\n–¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ú–æ–∂–µ—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —é–º–æ—Ä–æ–º? ü§î",
            Utils::get_user_text(&user),
            Messages::pluralize(dislikes, ("–¥–∏–∑–ª–∞–π–∫", "–¥–∏–∑–ª–∞–π–∫–∞", "–¥–∏–∑–ª–∞–π–∫–æ–≤"))
        );

        app.bot
            .send_message(meme.chat_id(), &text)
            .reply_to_message_id(meme.msg_id())
            .await
            .expect("Can't send 'top of' message");
    }

    Ok(())
}

fn get_translations(period: &Utils::Period) -> (&str, &str) {
    match *period {
        Utils::Period::Week => ("–Ω–µ–¥–µ–ª–∏", "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"),
        Utils::Period::Month => ("–º–µ—Å—è—Ü–∞", "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"),
        Utils::Period::Year => ("–≥–æ–¥–∞", "–≤ —ç—Ç–æ–º –≥–æ–¥—É"),
    }
}
