use anyhow::Result;
use teloxide::prelude::*;

use crate::app::utils as Utils;
use crate::app::utils::Messages;
use crate::app::Application;
use crate::database::models::MemeLikeOperation;

pub async fn send_top_stats(app: &Application, period: Utils::Period) -> Result<()> {
    let mut text: String;
    let _res = app.database.get_top_meme(&period);
    let period_text = get_translations(&period);

    if _res.is_ok() {
        let (meme, likes) = _res.as_ref().unwrap();
        let user = app
            .get_chat_user(meme.chat_id().0, meme.user_id().0)
            .await?;

        text = format!(
            "üéâ —Ç–≤–æ–π –º–µ–º –Ω–∞–±—Ä–∞–ª {}!\n–ë–æ–ª—å—à–µ –≤—Å–µ—Ö {}!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! {}",
            Utils::get_user_text(&user),
            Messages::pluralize(*likes, ("–ª–∞–π–∫", "–ª–∞–π–∫–∞", "–ª–∞–π–∫–æ–≤")),
            period_text.1
        );
    } else {
        error!("Can't get top mem for this period!");

        return Ok(());
    }

    let (meme, _) = _res.as_ref().unwrap();

    app.bot
        .send_message(meme.chat_id(), &text)
        .reply_to_message_id(meme.msg_id())
        .await
        .expect("Can't send 'top of' message");

    text = String::new();
    let _res = app.database.get_top_memesender(&period);

    if _res.is_ok() {
        let (user_id, count) = _res.unwrap();
        let user = app.get_chat_user(meme.chat_id().0, user_id as u64).await?;

        text = format!(
            "ü§° –ú–µ–º–æ–º—ë—Ç {}:\n{} –æ—Ç–ø—Ä–∞–≤–∏–ª {} {}!\n\n",
            period_text.0,
            Utils::get_user_text(&user),
            Messages::pluralize(count, ("–º–µ–º", "–º–µ–º–∞", "–º–µ–º–æ–≤")),
            period_text.1
        );
    }

    let _res = app.database.get_top_selflikes(&period);

    if _res.is_ok() {
        let (user_id, count) = _res.unwrap();
        let user = app.get_chat_user(meme.chat_id().0, user_id as u64).await?;

        if count > 4 {
            text = format!(
                "{text}üòà –•–∏—Ç—Ä–µ—Ü {}:\n{} –ª–∞–π–∫–Ω—É–ª —Å–≤–æ–∏ –∂–µ –º–µ–º—ã {} {}!\n\n",
                period_text.0,
                Utils::get_user_text(&user),
                Messages::pluralize(count, ("—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑")),
                period_text.1
            );
        }
    }

    let _res = app
        .database
        .get_top_likers(&period, MemeLikeOperation::Like);

    if _res.is_ok() {
        let (user_id, count) = _res.unwrap();
        let user = app.get_chat_user(meme.chat_id().0, user_id as u64).await?;

        text = format!(
            "{text}‚ù§Ô∏è –î–æ–±—Ä–æ–¥–µ—è—Ç–µ–ª—å {}:\n{} –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ {}!\n–¶–µ–ª—ã—Ö {}\n\n",
            period_text.0,
            Utils::get_user_text(&user),
            period_text.1,
            Messages::pluralize(count, ("–ª–∞–π–∫", "–ª–∞–π–∫–∞", "–ª–∞–π–∫–æ–≤")),
        );
    }

    let _res = app
        .database
        .get_top_likers(&period, MemeLikeOperation::Dislike);

    if _res.is_ok() {
        let (user_id, count) = _res.unwrap();
        let user = app.get_chat_user(meme.chat_id().0, user_id as u64).await?;

        text = format!(
            "{text}üò° –ó–∞—Å—Ä–∞–Ω–µ—Ü {}:\n{} –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö –¥–∏–∑–ª–∞–π–∫–æ–≤ {}!\n–¶–µ–ª—ã—Ö {}",
            period_text.0,
            Utils::get_user_text(&user),
            period_text.1,
            Messages::pluralize(count, ("–¥–∏–∑–ª–∞–π–∫", "–¥–∏–∑–ª–∞–π–∫–∞", "–¥–∏–∑–ª–∞–π–∫–æ–≤")),
        );
    }

    if !text.is_empty() {
        app.bot
            .send_message(
                meme.chat_id(),
                format!("–•–æ—Ç–µ–ª–∏ —Ç–æ–ø–æ–≤? –ò—Ö –µ—Å—Ç—å —É –º–µ–Ω—è!\n\n{}", &text),
            )
            .await
            .expect("Can't send 'top of' message");
    }

    let _res = app.database.get_max_disliked_meme(&period);

    if _res.is_ok() && period == Utils::Period::Week {
        let (meme, dislikes) = _res.as_ref().unwrap();
        let user = app
            .get_chat_user(meme.chat_id().0, meme.user_id().0)
            .await?;

        text = format!(
            "–í—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, {} –Ω–∞ —Ç–≤–æ–π –º–µ–º –Ω–∞—Å—Ç–∞–≤–∏–ª–∏ {}!\n–¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ú–æ–∂–µ—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —é–º–æ—Ä–æ–º? ü§î",
            Utils::get_user_text(&user),
            Messages::pluralize(*dislikes, ("–¥–∏–∑–ª–∞–π–∫", "–¥–∏–∑–ª–∞–π–∫–∞", "–¥–∏–∑–ª–∞–π–∫–æ–≤"))
        );

        app.bot
            .send_message(meme.chat_id(), &text)
            .reply_to_message_id(meme.msg_id())
            .await
            .expect("Can't send 'top of' message");
    }

    Ok(())
}

fn get_translations(period: &Utils::Period) -> (&str, &str) {
    match *period {
        Utils::Period::Week => ("–Ω–µ–¥–µ–ª–∏", "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"),
        Utils::Period::Month => ("–º–µ—Å—è—Ü–∞", "–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"),
        Utils::Period::Year => ("–≥–æ–¥–∞", "–≤ —ç—Ç–æ–º –≥–æ–¥—É"),
    }
}
