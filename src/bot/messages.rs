use teloxide::{
    prelude::*,
    types::{
        InputFile,
        ReplyMarkup,
        MessageKind,
    }
};
use std::error::Error;
use std::sync::Arc;
use rand::seq::SliceRandom;

use crate::bot::markups::*;
use crate::Application;
use crate::database::repository::MemeRepository;

pub async fn message_handle(bot: Bot, msg: Message, state: Arc<Application>) -> Result<(), Box<dyn Error + Send + Sync>> {
    if msg.chat.id.0 > 0 {
        bot.send_message(msg.chat.id, String::from("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")).await?;

        return Ok(());
    }

    match &msg.kind {
        MessageKind::Common(_) => {
            handle_common(&bot, &msg, &state).await?;
        },
        MessageKind::NewChatMembers(_) => {
            handle_mewbie(&bot, &msg).await?;
        },
        _ => {}
    }
    
    Ok(())
}

async fn handle_common(bot: &Bot, msg: &Message, state: &Arc<Application>) -> Result<(), Box<dyn Error + Send + Sync>> {
    let user = msg.from().unwrap();
    let repository = MemeRepository::new(state.db_manager.clone());

    let user_text = match &user.username {
        Some(uname) => format!("@{}", uname),
        None => format!("[{}](tg://user?id={})", user.first_name, user.id.0)
    };

    // If This is forwarded message - nothing to do.
    if msg.forward().is_some() {
        return Ok(());
    }

    match msg.photo() {
        Some(photos) => {
            // If caption contains "nomeme" - nothing to do.
            if msg.caption().unwrap_or("").contains("nomeme") {
                return Ok(());
            }

            let meme = repository.add(&msg).unwrap();

            bot.delete_message(msg.chat.id, msg.id).await?;

            let markup = MemeMarkup::new(0, 0, meme.uuid);
            let bot_msg = bot.send_photo(msg.chat.id, InputFile::file_id(&photos[0].file.id))
                .caption(format!("–û—Ü–µ–Ω–∏—Ç–µ –º–µ–º {}", user_text))
                .reply_markup(ReplyMarkup::InlineKeyboard(markup.get_markup())).await?
            ;

            repository.add_msg_id(&meme.uuid, &bot_msg);
        },
        None => {}
    }

    Ok(())
}

async fn handle_mewbie(bot: &Bot, msg: &Message) -> Result<(), Box<dyn Error + Send + Sync>> {
    let newbie_msg = vec![
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –° –Ω–æ–≤–µ–Ω—å–∫–∏—Ö –ø–æ –º–µ–º—É, –º–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "–ü—Ä–∏–≤–µ—Ç, {user_name}! –ï—Å—Ç—å –º–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ - —Å –Ω–æ–≤–µ–Ω—å–∫–∏—Ö –ø–æ –º–µ–º—É. –£ —Ç–µ–±—è 1 —á–∞—Å. –ü–æ—Ç–æ–º —Ç–µ–±—è —É–¥–∞–ª—è—Ç (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏–∏ –ø—Ä–∏–Ω—è—Ç–æ –æ—Ç–¥–µ–ª–æ–º –∫–∞–¥—Ä–æ–≤, –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–∏—Å–ª–∞–≤ –º–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n–í—Å–µ –Ω–µ–∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ - –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –ª–µ—Ç. (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–æ, —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–ø—É—Å–∫ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∞ 7 –º–µ—Å—è—Ü–µ–≤, –¥–ª—è –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "900: {user_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ '–í —Ñ–æ–Ω–¥ –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è –õ—É–Ω—ã', –°—É–º–º–∞: 34765.00 —Ä—É–±–ª–µ–π, –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (—á–µ—Å—Ç–Ω–æ, –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ üòä)",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Å—Ä–æ—á–∫—É –æ—Ç –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø—Ä–∏—à–ª–µ—Ç–µ –º–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    ];

    bot.delete_message(msg.chat.id, msg.id).await?;

    let users = msg.new_chat_members().expect("New chat members not found!");

    let a: Vec<String> = users.iter().map(|user| {
        match &user.username {
            Some(uname) => format!("@{}", uname),
            None => format!("[{}](tg://user?id={})", user.first_name, user.id.0)
        }
    }).collect();

    let message = newbie_msg.choose(&mut rand::thread_rng()).unwrap();

    bot.send_message(
        msg.chat.id,
        message.clone().replace("{user_name}", a.join(", ").as_str())
    ).await?;

    Ok(())
}