//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::database::entity::meme_likes::MemeLikesCountAll;
use crate::database::entity::prelude::{MemeLikes, Memes};
use crate::database::models::MemeLikeOperation;
use crate::database::Database;
use sea_orm::entity::prelude::*;
use teloxide::prelude::{ChatId, UserId};
use teloxide::types::MessageId;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "memes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub msg_id: Option<i64>,
    pub user_id: i64,
    pub chat_id: i64,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub photos: Option<Json>,
    pub posted_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub long_hash: Option<String>,
    pub short_hash: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::meme_likes::Entity")]
    MemeLikes,
}

impl Related<super::meme_likes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MemeLikes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub async fn get(uuid: Uuid) -> Model {
        Memes::find_by_id(uuid)
            .one(Database::global().connection())
            .await
            .expect("error")
            .unwrap()
    }
}

impl Model {
    pub fn chat_id(&self) -> ChatId {
        ChatId(self.chat_id)
    }

    pub fn user_id(&self) -> UserId {
        UserId(self.user_id as u64)
    }

    pub fn msg_id(&self) -> MessageId {
        MessageId(self.msg_id.unwrap() as i32)
    }

    pub async fn like(&self, from_user_id: i64) -> bool {
        MemeLikes::add(self.uuid, from_user_id, MemeLikeOperation::Like).await
    }

    pub async fn dislike(&self, from_user_id: i64) -> bool {
        MemeLikes::add(self.uuid, from_user_id, MemeLikeOperation::Dislike).await
    }

    pub async fn like_exists(&self, from_user_id: i64) -> bool {
        MemeLikes::exists(self.uuid, from_user_id, MemeLikeOperation::Like).await
    }

    pub async fn dislike_exists(&self, from_user_id: i64) -> bool {
        MemeLikes::exists(self.uuid, from_user_id, MemeLikeOperation::Dislike).await
    }

    pub async fn cancel_like(&self, from_user_id: i64) -> bool {
        MemeLikes::remove(self.uuid, from_user_id, MemeLikeOperation::Like).await
    }

    pub async fn cancel_dislike(&self, from_user_id: i64) -> bool {
        MemeLikes::remove(self.uuid, from_user_id, MemeLikeOperation::Dislike).await
    }

    pub async fn count_all_likes(&self) -> MemeLikesCountAll {
        MemeLikes::count_all(self.uuid).await
    }
}
